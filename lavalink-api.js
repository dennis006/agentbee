// üéµ LAVALINK API ROUTEN
// Dashboard-Integration f√ºr das Lavalink-Musik-System

const express = require('express');
const router = express.Router();

// üîç Musik suchen und abspielen
function registerLavalinkAPI(app, client) {
    console.log('üéµ Registriere Lavalink-API...');
    
    // üîç Song suchen
    app.post('/api/music/search', async (req, res) => {
        try {
            const { query, guildId } = req.body;
            
            if (!query || !guildId) {
                return res.status(400).json({ 
                    success: false, 
                    error: 'Query und Guild ID erforderlich' 
                });
            }
            
            const lavalinkSystem = require('./lavalink-music-system');
            
            // Manager pr√ºfen
            if (!global.lavalinkManager) {
                return res.status(503).json({ 
                    success: false, 
                    error: 'Lavalink-Manager nicht verf√ºgbar' 
                });
            }
            
            // Suche ausf√ºhren
            const searchResult = await global.lavalinkManager.search(query, null);
            
            if (!searchResult || !searchResult.tracks || searchResult.tracks.length === 0) {
                return res.status(404).json({ 
                    success: false, 
                    error: 'Keine Suchergebnisse gefunden' 
                });
            }
            
            // Erste 10 Ergebnisse zur√ºckgeben
            const tracks = searchResult.tracks.slice(0, 10).map(track => ({
                title: track.title,
                author: track.author,
                duration: track.duration,
                uri: track.uri,
                thumbnail: track.thumbnail,
                sourceName: track.sourceName
            }));
            
            res.json({
                success: true,
                tracks: tracks,
                count: tracks.length
            });
            
        } catch (error) {
            console.error('‚ùå Lavalink Suche Fehler:', error);
            res.status(500).json({ 
                success: false, 
                error: 'Suchfehler: ' + error.message 
            });
        }
    });
    
    // ‚ñ∂Ô∏è Song abspielen
    app.post('/api/music/play', async (req, res) => {
        try {
            const { query, guildId, voiceChannelId, textChannelId, requestedBy } = req.body;
            
            if (!query || !guildId || !voiceChannelId) {
                return res.status(400).json({ 
                    success: false, 
                    error: 'Query, Guild ID und Voice Channel ID erforderlich' 
                });
            }
            
            const lavalinkSystem = require('./lavalink-music-system');
            
            // Song suchen und abspielen
            const result = await lavalinkSystem.searchAndPlay(
                query, 
                guildId, 
                voiceChannelId, 
                textChannelId || null, 
                requestedBy || 'Dashboard'
            );
            
            if (result.success) {
                res.json({
                    success: true,
                    message: 'Song erfolgreich hinzugef√ºgt',
                    track: {
                        title: result.track.title,
                        author: result.track.author,
                        duration: result.track.duration
                    },
                    queueLength: result.queueLength,
                    isPlaying: result.isPlaying
                });
            } else {
                res.status(400).json({
                    success: false,
                    error: result.message || 'Fehler beim Abspielen'
                });
            }
            
        } catch (error) {
            console.error('‚ùå Lavalink Play Fehler:', error);
            res.status(500).json({ 
                success: false, 
                error: 'Wiedergabe-Fehler: ' + error.message 
            });
        }
    });
    
    // ‚è∏Ô∏è Pausieren
    app.post('/api/music/pause/:guildId', async (req, res) => {
        try {
            const { guildId } = req.params;
            const lavalinkSystem = require('./lavalink-music-system');
            
            const success = lavalinkSystem.pausePlayback(guildId);
            
            res.json({
                success: success,
                message: success ? 'Wiedergabe pausiert' : 'Kein aktiver Player gefunden'
            });
            
        } catch (error) {
            console.error('‚ùå Lavalink Pause Fehler:', error);
            res.status(500).json({ 
                success: false, 
                error: 'Pause-Fehler: ' + error.message 
            });
        }
    });
    
    // ‚ñ∂Ô∏è Fortsetzen
    app.post('/api/music/resume/:guildId', async (req, res) => {
        try {
            const { guildId } = req.params;
            const lavalinkSystem = require('./lavalink-music-system');
            
            const success = lavalinkSystem.resumePlayback(guildId);
            
            res.json({
                success: success,
                message: success ? 'Wiedergabe fortgesetzt' : 'Kein pausierter Player gefunden'
            });
            
        } catch (error) {
            console.error('‚ùå Lavalink Resume Fehler:', error);
            res.status(500).json({ 
                success: false, 
                error: 'Resume-Fehler: ' + error.message 
            });
        }
    });
    
    // ‚è≠Ô∏è Skip
    app.post('/api/music/skip/:guildId', async (req, res) => {
        try {
            const { guildId } = req.params;
            const lavalinkSystem = require('./lavalink-music-system');
            
            const success = lavalinkSystem.skipTrack(guildId);
            
            res.json({
                success: success,
                message: success ? 'Song √ºbersprungen' : 'Kein aktiver Player gefunden'
            });
            
        } catch (error) {
            console.error('‚ùå Lavalink Skip Fehler:', error);
            res.status(500).json({ 
                success: false, 
                error: 'Skip-Fehler: ' + error.message 
            });
        }
    });
    
    // ‚èπÔ∏è Stoppen
    app.post('/api/music/stop/:guildId', async (req, res) => {
        try {
            const { guildId } = req.params;
            const lavalinkSystem = require('./lavalink-music-system');
            
            const success = lavalinkSystem.stopPlayback(guildId);
            
            res.json({
                success: success,
                message: success ? 'Wiedergabe gestoppt' : 'Kein aktiver Player gefunden'
            });
            
        } catch (error) {
            console.error('‚ùå Lavalink Stop Fehler:', error);
            res.status(500).json({ 
                success: false, 
                error: 'Stop-Fehler: ' + error.message 
            });
        }
    });
    
    // üîä Lautst√§rke setzen
    app.post('/api/music/volume/:guildId', async (req, res) => {
        try {
            const { guildId } = req.params;
            const { volume } = req.body;
            
            if (volume === undefined || volume < 0 || volume > 100) {
                return res.status(400).json({ 
                    success: false, 
                    error: 'Lautst√§rke muss zwischen 0 und 100 liegen' 
                });
            }
            
            const lavalinkSystem = require('./lavalink-music-system');
            const newVolume = lavalinkSystem.setVolume(guildId, volume);
            
            if (newVolume !== null) {
                res.json({
                    success: true,
                    message: `Lautst√§rke auf ${newVolume}% gesetzt`,
                    volume: newVolume
                });
            } else {
                res.status(404).json({
                    success: false,
                    error: 'Kein aktiver Player gefunden'
                });
            }
            
        } catch (error) {
            console.error('‚ùå Lavalink Volume Fehler:', error);
            res.status(500).json({ 
                success: false, 
                error: 'Volume-Fehler: ' + error.message 
            });
        }
    });
    
    // üìã Queue-Status abrufen
    app.get('/api/music/queue/:guildId', async (req, res) => {
        try {
            const { guildId } = req.params;
            const lavalinkSystem = require('./lavalink-music-system');
            
            const queueInfo = lavalinkSystem.getQueueInfo(guildId);
            
            if (queueInfo) {
                res.json({
                    success: true,
                    current: queueInfo.current ? {
                        title: queueInfo.current.title,
                        author: queueInfo.current.author,
                        duration: queueInfo.current.duration,
                        position: queueInfo.position
                    } : null,
                    queue: queueInfo.queue.map(track => ({
                        title: track.title,
                        author: track.author,
                        duration: track.duration
                    })),
                    isPlaying: queueInfo.isPlaying,
                    isPaused: queueInfo.isPaused,
                    volume: queueInfo.volume,
                    connected: queueInfo.connected
                });
            } else {
                res.json({
                    success: true,
                    current: null,
                    queue: [],
                    isPlaying: false,
                    isPaused: false,
                    volume: 80,
                    connected: false
                });
            }
            
        } catch (error) {
            console.error('‚ùå Lavalink Queue Fehler:', error);
            res.status(500).json({ 
                success: false, 
                error: 'Queue-Fehler: ' + error.message 
            });
        }
    });
    
    // üìä Lavalink-Statistiken
    app.get('/api/music/stats', async (req, res) => {
        try {
            const lavalinkSystem = require('./lavalink-music-system');
            
            const stats = lavalinkSystem.getLavalinkStats();
            const health = await lavalinkSystem.healthCheck();
            
            res.json({
                success: true,
                stats: stats,
                health: health,
                timestamp: new Date().toISOString()
            });
            
        } catch (error) {
            console.error('‚ùå Lavalink Stats Fehler:', error);
            res.status(500).json({ 
                success: false, 
                error: 'Stats-Fehler: ' + error.message 
            });
        }
    });
    
    // üîß Health Check f√ºr Lavalink
    app.get('/api/music/health', async (req, res) => {
        try {
            const lavalinkSystem = require('./lavalink-music-system');
            
            const health = await lavalinkSystem.healthCheck();
            
            if (health.healthy) {
                res.json({
                    success: true,
                    healthy: true,
                    message: 'Lavalink-System ist gesund',
                    stats: health.stats,
                    bestNode: health.bestNode ? health.bestNode.identifier : null
                });
            } else {
                res.status(503).json({
                    success: false,
                    healthy: false,
                    message: 'Lavalink-System ist nicht verf√ºgbar',
                    reason: health.reason
                });
            }
            
        } catch (error) {
            console.error('‚ùå Lavalink Health Fehler:', error);
            res.status(500).json({ 
                success: false, 
                healthy: false,
                error: 'Health-Check-Fehler: ' + error.message 
            });
        }
    });
    
    // üåê Verf√ºgbare Quellen abrufen
    app.get('/api/music/sources', (req, res) => {
        try {
            const sources = [
                {
                    name: 'YouTube',
                    identifier: 'ytsearch',
                    description: 'YouTube-Suche',
                    icon: 'üì∫',
                    enabled: true
                },
                {
                    name: 'YouTube Music',
                    identifier: 'ytmsearch',
                    description: 'YouTube Music-Suche',
                    icon: 'üéµ',
                    enabled: true
                },
                {
                    name: 'SoundCloud',
                    identifier: 'scsearch',
                    description: 'SoundCloud-Suche',
                    icon: 'üéß',
                    enabled: true
                },
                {
                    name: 'Spotify',
                    identifier: 'spsearch',
                    description: 'Spotify-Suche (falls verf√ºgbar)',
                    icon: 'üé∂',
                    enabled: false // Abh√§ngig von Lavalink-Node-Konfiguration
                }
            ];
            
            res.json({
                success: true,
                sources: sources,
                count: sources.length
            });
            
        } catch (error) {
            console.error('‚ùå Lavalink Sources Fehler:', error);
            res.status(500).json({ 
                success: false, 
                error: 'Sources-Fehler: ' + error.message 
            });
        }
    });
    
    console.log('‚úÖ Lavalink-API Routen registriert');
}

module.exports = {
    registerLavalinkAPI
}; 