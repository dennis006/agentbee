---
description: 
globs: 
alwaysApply: false
---
# Style & Struktur
- Functional Components mit Hooks; Trennung von UI (Components) und Logik (Custom Hooks).
- Dateibenennung: `PascalCase.tsx` für Komponenten, `camelCase.ts` für Utils.

# Naming Conventions
- Variablen/Funktionen in `camelCase`, React-Komponenten in `PascalCase`.
- Interfaces beginnen mit `I`-Prefix (z. B. `IUser`), Types ohne Prefix.

# TypeScript Usage
- `strict`-Modus ON.
- `interface` statt `type` bei Objekt-Shapes, Union-Types nur wenn nötig.
- Keine `any`-Typen; Nutze Utility-Types (`Partial`, `Pick` usw.).

# UI & Styling
- Nutze shadcn/ui-Komponenten, Tailwind-Utilities.
- Global Styles in `src/styles/globals.css`, Komponentenspezifische Styles in `module.css` oder Tailwind.

# Performance-Optimierung
- Memoize Hooks (`useMemo`, `useCallback`) nur bei nachgewiesenem Benefit.
- Code-Splitting mit dynamic imports (`next/dynamic`).

# Tests & CI
- Jest für Unit-Tests (React Testing Library), pytest für Python.
- Jeder neue Code braucht mindestens einen Test.
- PRs dürfen nur gemergt werden, wenn alle Checks (Lint, Tests) grün sind.


